@page "/blog/{slug}"

@using GraphQL
@using GraphQL.Client.Http
@using Models
@using Markdig
@using Markdig.Prism

@inject GraphQLHttpClient graphQlClient
@inject NavigationManager navigation
@inject IJSRuntime _jsRuntime


<div class="py-5 bg-light">
	<section>
		<div class="container">
			@if (item == null)
			{
				<p>Loading...</p>
			}
			else
			{

				<img src="@item.heroImage.url" class="img-fluid" alt="@item.heroImage.description" />
				<div class="p-4 absolute bottom-0 left-0 z-20">
					<a href="#"
					   class="">@item.tag</a>
					<h2 class="">
						@item.title
					</h2>
					<h5>@item.author</h5>
					<p>@item.postDate.Date</p>
					<div class="">
						<img src=""
							 class="" />
						<div class="line-numbers">
							@ConvertToMarkUp(item.body)
						</div>
					</div>
				</div>
			}
		</div>
	</section>
</div>


@code {

	[Parameter]
	public string Slug { get; set; }

	private Item item = null;

	protected async override Task OnInitializedAsync()
	{
		if (string.IsNullOrEmpty(Slug))
		{
			navigation.NavigateTo($"/blog");
		}
		else
		{
			var res = await GetResponse();

			item = res.Data.articleCollection.items.FirstOrDefault();
		}

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		//todo: this isn't working as expected - lines are not highlighting
		await _jsRuntime.InvokeVoidAsync("highlightCode");
	}

	private string BuildHtmlFromMarkdown(string value) => Markdig.Markdown.ToHtml(
						markdown: value,
						pipeline: new MarkdownPipelineBuilder()
							.UseAdvancedExtensions()
							.UsePrism()
							.Build()
					);

	//stolen from Ed Charbeneau - https://edcharbeneau.com/BlazeDown/ - with his permission!
	private MarkupString ConvertToMarkUp(string markdown)
	{
		return (MarkupString)BuildHtmlFromMarkdown(markdown);
	}

	private async Task<GraphQLResponse<data>> GetResponse()
	{

		var articleRequest = new GraphQLRequest
		{
			Query = $@"{{

articleCollection: articleCollection(where:
{{slug: ""{Slug}""}}) {{
items {{
title
tag
postDate
body
shortDescription
heroImage{{
url
description
}}
}}
}}
}}",
			OperationName = null
		};


		return await graphQlClient.SendQueryAsync<data>(articleRequest);
	}
}


@* adding prism.js as described in this blog: https://blog.ladeak.net/posts/blazor-code-highlight*@